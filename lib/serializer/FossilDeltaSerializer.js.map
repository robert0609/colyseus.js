{"version":3,"file":"FossilDeltaSerializer.js","sourceRoot":"","sources":["../../src/serializer/FossilDeltaSerializer.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAsCE","sourcesContent":["/*\r\n\r\n// Dependencies:\r\n// \"@gamestdio/state-listener\": \"^3.1.0\",\r\n// \"fossil-delta\": \"^1.0.0\",\r\n\r\nimport { Serializer } from \"./Serializer\";\r\n\r\nimport { StateContainer } from '@gamestdio/state-listener';\r\nimport * as fossilDelta from 'fossil-delta';\r\nimport * as msgpack from '../msgpack';\r\n\r\nexport class FossilDeltaSerializer<State= any> implements Serializer<State> {\r\n    api: StateContainer<State> = new StateContainer<State>({} as State);\r\n    protected previousState: any;\r\n\r\n    getState(): State {\r\n        return this.api.state;\r\n    }\r\n\r\n    setState(encodedState: any): void {\r\n        this.previousState = new Uint8Array(encodedState);\r\n        this.api.set(msgpack.decode(this.previousState));\r\n    }\r\n\r\n    patch(binaryPatch) {\r\n        // apply patch\r\n        this.previousState = new Uint8Array(fossilDelta.apply(this.previousState, binaryPatch));\r\n\r\n        // trigger update callbacks\r\n        this.api.set(msgpack.decode(this.previousState));\r\n    }\r\n\r\n    teardown() {\r\n        this.api.removeAllListeners();\r\n    }\r\n}\r\n\r\n*/"]}