{"version":3,"file":"Connection.js","sourceRoot":"","sources":["../src/Connection.ts"],"names":[],"mappings":";;;AAAA,yDAA+D;AAE/D,uEAAoE;AAEpE,MAAa,UAAU;IAInB,YAAY,QAAiB;QAF7B,WAAM,GAAuB,EAAE,CAAC;QAG5B,QAAQ,QAAQ,EAAE,CAAC;YACf,KAAK,IAAI;gBACL,IAAI,CAAC,SAAS,GAAG,IAAI,kCAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACvD,MAAM;YAEV;gBACI,IAAI,CAAC,SAAS,GAAG,IAAI,uCAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACrD,MAAM;QACd,CAAC;IACL,CAAC;IAED,OAAO,CAAC,GAAW,EAAE,OAAa;QAC9B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;IAC9D,CAAC;IAED,IAAI,CAAC,IAAyB;QAC1B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,cAAc,CAAC,IAAyB;QACpC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED,KAAK,CAAC,IAAa,EAAE,MAAe;QAChC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACvC,CAAC;IAED,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IACjC,CAAC;CAEJ;AApCD,gCAoCC","sourcesContent":["import { H3TransportTransport } from \"./transport/H3Transport\";\r\nimport { ITransport, ITransportEventMap } from \"./transport/ITransport\";\r\nimport { WebSocketTransport } from \"./transport/WebSocketTransport\";\r\n\r\nexport class Connection implements ITransport {\r\n    transport: ITransport;\r\n    events: ITransportEventMap = {};\r\n\r\n    constructor(protocol?: string) {\r\n        switch (protocol) {\r\n            case \"h3\":\r\n                this.transport = new H3TransportTransport(this.events);\r\n                break;\r\n\r\n            default:\r\n                this.transport = new WebSocketTransport(this.events);\r\n                break;\r\n        }\r\n    }\r\n\r\n    connect(url: string, options?: any): void {\r\n        this.transport.connect.call(this.transport, url, options);\r\n    }\r\n\r\n    send(data: Buffer | Uint8Array): void {\r\n        this.transport.send(data);\r\n    }\r\n\r\n    sendUnreliable(data: Buffer | Uint8Array): void {\r\n        this.transport.sendUnreliable(data);\r\n    }\r\n\r\n    close(code?: number, reason?: string): void {\r\n        this.transport.close(code, reason);\r\n    }\r\n\r\n    get isOpen() {\r\n        return this.transport.isOpen;\r\n    }\r\n\r\n}\r\n"]}